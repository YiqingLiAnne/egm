    % CheatSheet script
    % ChestSheet provides the usages of basic EGM parameters and functions
    % to solve the optimization problem.
    %
    % Yiqing Li, 10/20/2020
    %

    % Copyright: 2020 Yiqing Li(anne.yiqing.li@outlook.com)
    % CC-BY-SA

    %% Initialization
    % Load the useful path and display the information
    Initialization;

    %% Clean 
    % Clean the workspace
    clear all
    % Clean the folder for saving runs to avoid cover
    system('rm -r save_runs/TestRunP1')

    %% Load problem
    % Load the example problem
    egm = EGM;
    % Load a new problem
    egm = EGM('NewProblem');

    %% EGM parameters
    % Problem parameters
    egm.param.evaluationFunction = 'Example';
    egm.param.runName = 'TestRunP1';
    egm.param.upperLimit = [3   3];
    egm.param.lowerLimit = [-3 -3];
    egm.param.inputDimen = 2;
    egm.param.costDimen = egm.param.inputDimen + 1;
    egm.param.simplexSize = egm.param.inputDimen + 1;
    egm.param.punishCost = 10;
    
    % EGM parameters
    % ----------Gradient_simplex param----------
    simplexMirrorStep = 1;
    simplexContractStep = 0.5;
    simplexExpandStep = 2;
    simplexShrinkStep = 1/2;
    simplexParam = ...
    [simplexMirrorStep simplexContractStep simplexExpandStep simplexShrinkStep];
    egm.param.simplexParam = simplexParam; 
    egm.param.simplexSize = egm.param.inputDimen + 1;
    egm.param.gradient_Nstep = 1;   
    
    % ----------Exploration_sample param----------
    egm.param.exploration_Nstep = 1;            
    egm.param.sampleSetSize = 1e3;    
    
    %% Run EGM optimizer
    % Initialize the group
    egm.initialize_group;
    % Generate a simplex randomly in the space as the 1st egm group
    egm.generate_group;
    % Evaluate it
    egm.evaluate_group;
    % Update the group database
    egm.update_the_group;
    % Update the egm exploration and exploit footprints in the space
    egm.update_footprint;
    % Evolve EGM group
    egm.evolve_group;
        
    %% Save
    % save the object egm
    egm.save_results;
    
    %% Continue the previous run from the saved object egm
    % load the saved object
    egm.load_obj('TestRunP1');
    % set the name of new run 
    egm.param.runName = 'TestRunP2';
    % evolve the EGM group for 10 round
    egm.go(10);
    % save the new run
    egm.save_results;

    %% Post processing
    % Best vertex after the latest round
    egm.best_vertex;
    % Best 3 vertices after 8 round
    egm.best_vertices(8, 3);
    
    %%  Visualization and print
    % Plot and save the learning curve(cost-evaluation calls) during optimization.
    egm.learningCurve;
    egm.printFigure('learningCurve');
    % Plot and save control landscape during optimzation. 
    % It shows the studied vertices until the 5th round 
    % with proximity map generated by vertices in 10 rounds as background.
    egm.controlLandscape(5);
    egm.printFigure('controlLandscape_5th');
    % Plot and save the final control landscape.    
    egm.controlLandscape;
    egm.printFigure('controlLandscape_final');
    



